[
    {
        "id": "FCS_RBG_EXT.1.1",
        "type": "code",
        "choice_type": "or",
        "message": "Random Bit Generation Services",
        "selection": "The application {} for its cryptographic operations.",
        "choice": [
            {"pattern": "java\\.security\\.SecureRandomSpi", "description": "implement DRBG functionality"},
            {"pattern": "java\\.security\\.SecureRandom", "description": "invoke platform-provided DRBG functionality"},
            {"pattern": "java\\.util\\.Random", "description": "use no DRBG functionality"}
        ],
        "class": "Security Functional Requirements"
    },
    {
        "id": "FCS_STO_EXT.1.1",
        "type": "code",
        "choice_type": "or",
        "message": "Storage of Credentials",
        "selection": "The application {} to non-volatile memory.",
        "choice": [
            {"pattern": "android\\.security\\.KeyChain", "description": "invoke the functionality provided by the platform to securely store credentials"}
        ],
        "else": "does not store any credentials",
        "class": "Security Functional Requirements"
    },
    {
        "id": "FCS_CKM_EXT.1.1",
        "type": "code",
        "choice_type": "or",
        "message": "Cryptographic Key Generation Services",
        "selection": "The application {}.",
        "choice": [
            {"pattern": "java\\.security\\.KeyPairGenerator|KeyPairGenerator\\.getInstance\\(", "description": "implement asymmetric key generation"}
        ],
        "else": "generate no asymmetric cryptographic keys",
        "class": "Security Functional Requirements"
    },
    {
        "id": "FDP_DEC_EXT.1.1",
        "type": "manifest",
        "choice_type": "all",
        "message": "Access to Platform Resources",
        "selection": "The application has access to {}.",
        "choice": [
            {"pattern": "android\\.permission\\.(?:INTERNET|ACCESS_NETWORK_STATE)", "description": "network connectivity"},
            {"pattern": "android\\.permission\\.CAMERA", "description": "camera"},
            {"pattern": "android\\.permission\\.RECORD_AUDIO", "description": "microphone"},
            {"pattern": "android\\.permission\\.(?:ACCESS_COARSE_LOCATION|ACCESS_FINE_LOCATION)", "description": "location"},
            {"pattern": "android\\.permission\\.NFC", "description": "NFC"},
            {"pattern": "android\\.hardware\\.usb\\.(?:host|action\\.USB_DEVICE_ATTACHED)", "description": "USB"},
            {"pattern": "android\\.permission\\.BLUETOOTH", "description": "bluetooth"}
        ],
        "else": "no hardware resources",
        "class": "Security Functional Requirements"
    },
    {
        "id": "FDP_DEC_EXT.1.2",
        "type": "manifest",
        "choice_type": "all",
        "message": "Access to Platform Resources",
        "selection": "The application has access to {}.",
        "choice": [
            {"pattern": "android\\.permission\\.READ_CONTACTS", "description": "address book"},
            {"pattern": "android\\.permission\\.(?:READ_CALENDAR|WRITE_CALENDAR)", "description": "calendar"},
            {"pattern": "android\\.permission\\.READ_CALL_LOG", "description": "call lists"},
            {"pattern": "android\\.permission\\.READ_LOGS", "description": "system logs"}
        ],
        "else": "no sensitive information repositories",
        "class": "Security Functional Requirements"
    },
    {
        "id": "FDP_NET_EXT.1.1",
        "type": "manifest",
        "choice_type": "or",
        "message": "Network Communications",
        "selection": "The application has {}.",
        "choice": [
            {"pattern": "android\\.permission\\.INTERNET", "description": "user/application initiated network communications"}
        ],
        "else": "no network communications",
        "class": "Security Functional Requirements"
    },
    {
        "id": "FDP_DAR_EXT.1.1",
        "type": "code",
        "choice_type": "or",
        "message": "Encryption Of Sensitive Application Data",
        "selection": "The application {} in non-volatile memory.",
        "choice": [
            {"pattern": "androidx\\.security\\.crypto\\.(?:EncryptedFile|EncryptedSharedPreferences)", "description": "leverage platform-provided functionality to encrypt sensitive data"},
            {"pattern": "javax\\.crypto\\.Cipher|net\\.sqlcipher\\.|\\.encryptionKey\\(", "description": "implement functionality to encrypt sensitive data"}
        ],
        "else": "does not encrypt files",
        "class": "Security Functional Requirements"
    },
    {
        "id": "FMT_MEC_EXT.1.1",
        "type": "code",
        "choice_type": "or",
        "message": "Supported Configuration Mechanism",
        "selection": "The application invoke the mechanisms recommended by the platform vendor for storing and setting configuration options.",
        "choice": [
            {"pattern": "android\\.content\\.SharedPreferences|crypto\\.EncryptedSharedPreferences", "description": "null"}
        ],
        "class": "Security Functional Requirements"
    },
    {
        "id": "FTP_DIT_EXT.1.1",
        "type": "code",
        "choice_type": "or",
        "message": "Protection of Data in Transit",
        "selection": "The application does {} between itself and another trusted IT product.",
        "choice": [
            {"pattern": "(?:https|ssh|scp|sftp)://|\\.getInstance\\(\"TLS\"\\)|CkSsh\\(|com\\.jcraft\\.jsch\\.JSch", "description": "encrypt some transmitted data with HTTPS/TLS/SSH"}
        ],
        "else": "not encrypt any data in traffic or does not transmit any data",
        "class": "Security Functional Requirements"
    },
    {
        "id": "FCS_RBG_EXT.2.1,FCS_RBG_EXT.2.2",
        "type": "code",
        "choice_type": "or",
        "message": "Random Bit Generation from Application",
        "selection": "The application perform all deterministic random bit generation (DRBG) services in accordance with NIST Special Publication 800-90A using Hash_DRBG.",
        "choice": [
            {"pattern": "java\\.security\\.SecureRandom", "description": "null"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_CKM.1.1(1)",
        "type": "code",
        "choice_type": "and",
        "message": "Cryptographic Asymmetric Key Generation",
        "selection": "The application generate asymmetric cryptographic keys {}.",
        "choice": [
            {
                "pattern": "java\\.security\\.KeyPairGenerator|\\.getInstance\\(.{0,48}(?:RSA|rsa)",
                "description": "not in accordance with FCS_CKM.1.1(1) using key generation algorithm RSA schemes and cryptographic key sizes of 1024-bit or lower",
                "value": "512|768|1024"
            },
            {
                "pattern": "java\\.security\\.KeyPairGenerator|\\.getInstance\\(.{0,48}(?:RSA|rsa)",
                "description": "in accordance with a specified cryptographic key generation algorithm RSA schemes using cryptographic key sizes of 2048-bit or greater",
                "value": "2048|3072|4096"
            }
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_CKM.1.1(3),FCS_CKM.1.2(3)",
        "type": "code",
        "choice_type": "or",
        "message": "Password Conditioning",
        "selection": "A password/passphrase shall perform [Password-based Key Derivation Functions] {}.",
        "choice": [
            {"pattern": "\\.getInstance\\(\"PBKDF2|PBEKeySpec\\(.{0,48}?\\)", "description": "in accordance with a specified cryptographic algorithm."}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_COP.1.1(1)",
        "type": "code",
        "choice_type": "or",
        "message": "Cryptographic Operation - Encryption/Decryption",
        "selection": "The application perform encryption/decryption {}.",
        "choice": [
            {"pattern": "\\.getInstance\\(.{0,48}(?:AES/ECB/|/aes/ecb/|AES/CTR/|aes/ctr/)", "description": "not in accordance with FCS_COP.1.1(1), AES-ECB mode is being used"},
            {"pattern": "\\.getInstance\\(.{0,48}(?:AES/CBC/|aes/cbc|AES/GCM/|aes/gcm/)", "description": "in accordance with a specified cryptographic algorithm AES-CBC (as defined in NIST SP 800-38A) mode or AES-GCM (as defined in NIST SP 800-38D) and cryptographic key sizes 256-bit/128-bit"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_COP.1.1(2)",
        "type": "code",
        "choice_type": "or",
        "message": "Cryptographic Operation - Hashing",
        "selection": "The application perform cryptographic hashing services {}.",
        "choice": [
            {"pattern": "DigestUtils\\.md5\\(|\\.getInstance\\(.{0,48}(?:md4|md5|rc2|rc4|RC4|RC2|MD4|MD5)", "description": "not in accordance with FCS_COP.1.1(2) and uses the cryptographic algorithm RC2/RC4/MD4/MD5"},
            {"pattern": "\\.getInstance\\(.{0,48}(?:\\.SHA1|\\.SHA256|\\.SHA384|\\.SHA512|SHA-1|SHA-256|SHA-384|SHA-512|sha-1|sha-256|sha-384|sha-512)", "description": "in accordance with a specified cryptographic algorithm SHA-1/SHA-256/SHA-384/SHA-512 and message digest sizes 160/256/384/512 bits"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_COP.1.1(3)",
        "type": "code",
        "choice_type": "and",
        "message": "Cryptographic Operation - Signing",
        "selection": "The application perform cryptographic signature services (generation and verification) in accordance with a specified cryptographic algorithm {}.",
        "choice": [
            {
                "pattern": "\\.VerifyStringENC|\\.signStringENC|\\.signHashENC|\\.initVerify\\(|\\.verify\\(|\\.initSign\\(|\\.sign\\(",
                "description": "RSA schemes using cryptographic key sizes of 2048-bit or greater",
                "value": "CkRsa\\(|\\.getInstance\\(.{0,48}(?:RSA|rsa)"
            },
            {
                "pattern": "\\.VerifyStringENC|\\.signStringENC|\\.signHashENC|\\.initVerify\\(|\\.verify\\(|\\.initSign\\(|\\.sign\\(",
                "description": "ECDSA schemes using \"NIST curves\" P-256, P-384",
                "value": "CkEcc\\(|\\.getInstance\\(.{0,48}(?:ECDSA|ecdsa)"
            }
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_COP.1.1(4)",
        "type": "code",
        "choice_type": "all",
        "message": "Cryptographic Operation - Keyed-Hash Message Authentication",
        "selection": "The application perform keyed-hash message authentication with cryptographic algorithm {} .",
        "choice": [
            {"pattern": "\\.getInstance\\(*.HmacSHA256|put_HashAlgorithm\\(\"SHA-256", "description": "HMAC-SHA-256"},
            {"pattern": "\\.getInstance\\(*.HmacSHA1|put_HashAlgorithm\\(\"SHA-1", "description": "HMAC-SHA1"},
            {"pattern": "\\.getInstance\\(*.HmacSHA512|put_HashAlgorithm\\(\"SHA-512", "description": "HMAC-SHA-512"},
            {"pattern": "\\.getInstance\\(*.HmacSHA384|put_HashAlgorithm\\(\"SHA-384", "description": "HMAC-SHA-384"},
            {"pattern": "\\.getInstance\\(*.HmacMD5|put_HashAlgorithm\\(\"MD5", "description": "HMAC-MD5"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_HTTPS_EXT.1.1",
        "type": "code",
        "choice_type": "or",
        "message": "HTTPS Protocol",
        "selection": "The application implement the HTTPS protocol that complies with RFC 2818.",
        "choice": [
            {"pattern": "Scheme \\(\"https", "description": "null"},
            {"pattern": "HttpsURLConnection", "description": "null"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_HTTPS_EXT.1.2",
        "type": "code",
        "choice_type": "or",
        "message": "HTTPS Protocol",
        "selection": "The application implement HTTPS using TLS.",
        "choice": [
            {"pattern": "\\.getInstance\\(.{0,48}TLS|HttpsURLConnection| Scheme \\(\"https", "description": "null"},
            {"pattern": "\\.tlsVersions\\(TlsVersion", "description": "null"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_HTTPS_EXT.1.3",
        "type": "code",
        "choice_type": "or",
        "message": "HTTPS Protocol",
        "selection": "The application notify the user and {} if the peer certificate is deemed invalid.",
        "choice": [
            {"pattern": "SSLPeerUnverifiedException\\(|CertificateException|\\(.{0,48}SSLException|CertPathValidatorException", "description": "not establish the connection or request application authorization to establish the connection"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FIA_X509_EXT.1.1",
        "type": "code",
        "choice_type": "all",
        "message": "X.509 Certificate Validation",
        "selection": "The application invoked platform-provided functionality to validate certificates in accordance with the following rules: {}.",
        "choice": [
            {"pattern": "X509HostnameVerifier", "description": "RFC 5280 certificate validation and certificate path validation"},
            {"pattern": "checkClientTrusted", "description": "The certificate path must terminate with a trusted CA certificate"},
            {"pattern": "\\.getBasicConstraints\\(\\).{0,48}0|\\.getBasicConstraints\\(\\) >.{0,48} -1", "description": "The application validate a certificate path by ensuring the presence of the basicConstraints extension and that the CA flag is set to TRUE for all CA certificates"},
            {"pattern": "\\.isRevoked\\(|\\(PKIXRevocationChecker", "description": "The application validate the revocation status of the certificate using the Online Certificate Status Protocol (OCSP) as specified in RFC 2560 or a Certificate Revocation List (CRL) as specified in RFC 5759 or an OCSP TLS Status Request Extension (i.e., OCSP stapling) as specified in RFC 6066"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FIA_X509_EXT.1.2",
        "type": "code",
        "choice_type": "or",
        "message": "X.509 Certificate Validation",
        "selection": "The application treat a certificate as a CA certificate only if the basicConstraints extension is present and the CA flag is set to TRUE.",
        "choice": [
            {"pattern": "\\.getBasicConstraints\\(\\).{0,48}0|\\.getBasicConstraints\\(\\) >.{0,48} -1", "description": "null"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FIA_X509_EXT.2.1",
        "type": "code",
        "choice_type": "or",
        "message": "X.509 Certificate Authentication",
        "selection": "The application use X.509v3 certificates as defined by RFC 5280 to support authentication for HTTPS , TLS.",
        "choice": [
            {"pattern": "java\\.security\\.cert\\.X509Certificate", "description": "null"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FIA_X509_EXT.2.2",
        "type": "code",
        "choice_type": "and",
        "message": "X.509 Certificate Authentication",
        "selection": "When the application cannot establish a connection to determine the validity of a certificate, the application allow the administrator to choose whether to accept the certificate in these cases or accept the certificate ,or not accept the certificate.",
        "choice": [
            {
                "pattern": "java\\.security\\.cert\\.X509Certificate",
                "description": "CertificateExpiredException|CertificateNotYetValidException",
                "value": "\\.checkValidity\\("
            }
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FPT_TUD_EXT.2.1",
        "type": "code",
        "choice_type": "or",
        "message": "Integrity for Installation and Update",
        "selection": "The application shall be distributed using the format of the platform-supported package manager.",
        "choice": [
            {"pattern": "\\.enableInstallerId\\(InstallerID\\.GOOGLE_PLAY", "description": "null"},
            {"pattern": "\\.getInstallerPackageName\\(", "description": "null"}
        ],
        "class": "Selection-Based Security Functional Requirements"
    },
    {
        "id": "FCS_CKM.1.1(2)",
        "type": "code",
        "choice_type": "and",
        "message": "Cryptographic Symmetric Key Generation",
        "selection": "The application shall generate symmetric cryptographic keys using a Random Bit Generator as specified in FCS_RBG_EXT.1 and specified cryptographic key sizes 128 bit or 256 bit.",
        "choice": [
            {
                "pattern": "javax\\.crypto\\.KeyGenerator",
                "description": "KeyProperties\\.KEY_ALGORITHM_AES|\\.setKeySize\\(256|\\.setKeySize\\(128",
                "value": "\\.generateKey\\("
            },
            {
                "pattern": "SecureRandom\\(",
                "description": "\\.generateSecret\\(|SecretKeySpec\\(.{0,48}AES",
                "value": "null"
            }
        ],
        "class": "Optional Security Functional Requirements"
    }
]
